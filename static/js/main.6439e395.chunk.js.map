{"version":3,"sources":["components/EditorCellComponent.js","components/SaveButtonComponent.js","components/SavedDocsComponent.js","TextEditorApp.js","serviceWorker.js","index.js"],"names":["EditorCell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyCommand","bind","assertThisInitialized","command","editorState","newState","RichUtils","onChange","e","toggleInlineStyle","preventDefault","currentStyles","getCurrentInlineStyle","react_default","a","createElement","Container","Row","Col","xs","style","marginLeft","Button","color","className","has","block","onMouseDown","_onBoldClick","_onItalicClick","_onUnderlineClick","height","border","Draft","placeholder","Component","SaveButton","onClick","outline","borderColor","SavedDocsList","savedDocs","map","doc","ListGroupItem","key","borderRadius","deleteDoc","loadDoc","title","SavedDocs","disabled","hidden","length","ListGroup","width","TextEditorApp","state","modal","currentTitle","EditorState","createEmpty","docKey","setState","toggleModal","saveDoc","prevState","alert","content","getCurrentContent","push","createWithContent","i","splice","_this2","react","EditorCellComponent_EditorCell","SaveButtonComponent","SavedDocsComponent_SavedDocs","Modal","isOpen","toggle","ModalHeader","ModalBody","Input","value","target","ModalFooter","Boolean","window","location","hostname","match","ReactDOM","render","TextEditorApp_TextEditorApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6439e395.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Editor, RichUtils} from 'draft-js';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport 'draft-js/dist/Draft.css'\n\nexport default class EditorCell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.props.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  _onBoldClick(e) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, 'BOLD'));\n    e.preventDefault();\n  }\n\n  _onItalicClick(e) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, 'ITALIC'));\n    e.preventDefault();\n  }\n\n  _onUnderlineClick(e) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, 'UNDERLINE'));\n    e.preventDefault();\n  }\n\n  render() {\n\n    const currentStyles = this.props.editorState.getCurrentInlineStyle();\n\n    return (\n      <Container>\n        <Row>\n          <Col xs=\"2\" style={{marginLeft: \"-4%\"}}>\n            <Button color=\"none\" \n                    className={currentStyles.has('BOLD') ? \"text-info font-weight-bold\" : \"text-info font-weight-light\"} \n                    block \n                    onMouseDown={this._onBoldClick.bind(this)}>\n              Bold\n            </Button>\n          </Col>\n          <Col xs=\"2\" className=\"ml-2 mr-2\">\n            <Button color=\"none\" \n                    block \n                    className={currentStyles.has('ITALIC') ? \"text-info font-italic\" : \"text-info font-weight-light\"} \n                    onMouseDown={this._onItalicClick.bind(this)}>\n              Italic\n            </Button>\n          </Col>\n          <Col xs=\"2\">\n            <Button color=\"none\" \n                    block \n                    className=\"text-info font-weight-light\"\n                    onMouseDown={this._onUnderlineClick.bind(this)}>\n              {currentStyles.has('UNDERLINE') ? <u>Underline</u> : \"Underline\"}\n            </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs=\"12\" style={{height: \"160px\", border: \"1px solid #e8e8e8\"}}>\n            <Editor\n              placeholder=\"Type away...\"\n              editorState={this.props.editorState}\n              handleKeyCommand={this.handleKeyCommand}\n              onChange={this.props.onChange}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport { Button } from 'reactstrap';\n\n\nfunction SaveButton(props) {\n  return (\n    <Button onClick={props.onClick} color=\"secondary\" outline style={{borderColor: \"white\"}}>\n      <div className=\"font-weight-light\">Save</div>\n      <div className=\"fa fa-arrow-circle-right fa-3x\"></div>\n    </Button>\n  );\n}\n\nexport default SaveButton;\n\n","import React, { Component } from 'react';\nimport { Button, Container, Col, Row, ListGroup, ListGroupItem } from 'reactstrap';\n\nfunction SavedDocsList(props) {\n  return props.savedDocs.map(doc => {\n    return(\n      <ListGroupItem key={doc.key}\n                     style={{borderRadius: \"0px\", border: \"1px solid #e8e8e8\"}}>\n        <i onClick={() => props.deleteDoc(doc.key)} className=\"fa fa-trash text-secondary mr-3\"></i>\n        <span onClick={() => props.loadDoc(doc)}>{doc.title}</span>\n      </ListGroupItem>\n    );\n  });\n}\n\nexport default class SavedDocs extends Component {\n\n  render() {\n    return(\n      <Container>\n        <Row>\n          <Col style={{marginLeft: \"-7%\"}}>\n            <Button disabled hidden={this.props.savedDocs.length === 0} color=\"none\" className=\"font-weight-light\">Saved</Button>\n          </Col>\n        </Row>\n        <Row>\n          <ListGroup style={{width: \"100%\"}}>\n            <SavedDocsList savedDocs={this.props.savedDocs} \n                           loadDoc={this.props.loadDoc}\n                           deleteDoc={this.props.deleteDoc}\n            />\n          </ListGroup>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n","import React, { Component, Fragment } from 'react';\nimport { EditorState } from 'draft-js';\nimport EditorCell from './components/EditorCellComponent';\nimport SaveButton from './components/SaveButtonComponent';\nimport SavedDocs from './components/SavedDocsComponent';\nimport { Input, Modal, ModalHeader, ModalBody, ModalFooter, Button, Container, Row, Col } from 'reactstrap';\n\nexport default class TextEditorApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      currentTitle: 'Untitled',\n      editorState: EditorState.createEmpty(),\n      savedDocs: [],\n      docKey: 0\n    };\n    this.onChange = (editorState) => this.setState({editorState});\n\n    this.toggleModal = this.toggleModal.bind(this);\n    this.saveDoc = this.saveDoc.bind(this);\n    this.loadDoc = this.loadDoc.bind(this);\n    this.deleteDoc = this.deleteDoc.bind(this);\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  saveDoc() {\n    if (this.state.savedDocs.length >= 10) {\n      alert(\"Max Saved Docs: 10\")\n      this.toggleModal();\n    } else {\n      const doc = {};\n      doc.title = this.state.currentTitle;\n      doc.content = this.state.editorState.getCurrentContent();\n      doc.key = this.state.docKey;\n      const savedDocs = this.state.savedDocs;\n      savedDocs.push(doc);\n      this.setState({savedDocs});\n      this.setState({currentTitle: 'Untitled'});\n      this.setState({editorState: EditorState.createEmpty()});\n      this.setState(prevState => ({docKey: prevState.docKey + 1}));\n      this.toggleModal();\n    }\n  }\n\n  loadDoc(doc) {\n    this.setState({currentTitle: doc.title});\n    this.setState({editorState: EditorState.createWithContent(doc.content)});\n  }\n\n  deleteDoc(docKey) {\n    let savedDocs = this.state.savedDocs;\n    for (let i in savedDocs) {\n      if (savedDocs[i].key === docKey) {\n        savedDocs.splice(i,1);\n      }\n    }\n    this.setState({savedDocs});\n    this.setState({editorState: EditorState.createEmpty()});\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Container>\n          <Row>\n            <Col xs=\"6\">\n              <EditorCell editorState={this.state.editorState} onChange={this.onChange} />\n            </Col>\n            <Col xs=\"2\" className=\"mt-5 text-center\">\n              <SaveButton onClick={this.toggleModal} />\n            </Col>\n            <Col xs=\"4\">\n              <SavedDocs savedDocs={this.state.savedDocs}\n                         loadDoc={this.loadDoc}\n                         deleteDoc={this.deleteDoc} \n              />\n            </Col>\n          </Row>\n        </Container>\n        <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n          <ModalHeader className=\"text-muted\" toggle={this.toggleModal}>Title?</ModalHeader>\n          <ModalBody>\n            <Input value={this.state.currentTitle} onChange={e => {this.setState({currentTitle: e.target.value})}}/>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" outline onClick={this.saveDoc}>Save</Button>{' '}\n            <Button color=\"secondary\" outline onClick={this.toggleModal}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport TextEditorApp from './TextEditorApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TextEditorApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}