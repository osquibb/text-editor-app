{"version":3,"sources":["components/EditorCellComponent.js","components/SaveButtonComponent.js","components/SavedDocsComponent.js","TextEditorApp.js","serviceWorker.js","index.js"],"names":["EditorCell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editorHover","handleKeyCommand","bind","assertThisInitialized","command","editorState","newState","RichUtils","onChange","e","toggleInlineStyle","preventDefault","_this2","currentStyles","getCurrentInlineStyle","react_default","a","createElement","Container","Row","className","Col","xs","onMouseDown","_onBoldClick","style","backgroundColor","has","_onItalicClick","_onUnderlineClick","onClick","editor","focus","minHeight","border","padding","boxShadow","cursor","Draft","ref","placeholder","Component","SaveButton","SavedDocsList","savedDocs","map","doc","ListGroupItem","key","borderRadius","margin","deleteDoc","currentDocKey","loadDoc","title","SavedDocs","fontVariant","hidden","length","ListGroup","width","SavedDocsComponent_SavedDocsList","TextEditorApp","modal","currentTitle","EditorState","createEmpty","nextDocKey","setState","toggleModal","saveDoc","prevState","alert","content","getCurrentContent","push","createWithContent","docKey","i","splice","react","EditorCellComponent_EditorCell","display","alignItems","SaveButtonComponent","SavedDocsComponent_SavedDocs","Modal","isOpen","toggle","ModalHeader","ModalBody","Input","value","target","ModalFooter","Button","color","outline","Boolean","window","location","hostname","match","ReactDOM","render","TextEditorApp_TextEditorApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e4cc3b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Editor, RichUtils} from 'draft-js';\nimport { Container, Row, Col } from 'reactstrap';\nimport 'draft-js/dist/Draft.css'\n\nexport default class EditorCell extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorHover: false};\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.props.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  _onBoldClick(e) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, 'BOLD'));\n    e.preventDefault();\n  }\n\n  _onItalicClick(e) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, 'ITALIC'));\n    e.preventDefault();\n  }\n\n  _onUnderlineClick(e) {\n    this.props.onChange(RichUtils.toggleInlineStyle(this.props.editorState, 'UNDERLINE'));\n    e.preventDefault();\n  }\n\n  render() {\n\n    const currentStyles = this.props.editorState.getCurrentInlineStyle();\n\n    return (\n      <Container>\n        <Row className=\"mt-3\">\n          <Col xs=\"3\">\n            <button className='format-button'\n                    onMouseDown={this._onBoldClick.bind(this)}\n                    style= {{backgroundColor: currentStyles.has('BOLD') ? \"#FFFBC7\" : null}}\n            >\n              Bold\n            </button>\n          </Col>\n          <Col xs=\"3\" className=\"ml-2 mr-2\">\n            <button className=\"format-button\"\n                    onMouseDown={this._onItalicClick.bind(this)}\n                    style= {{backgroundColor: currentStyles.has('ITALIC') ? \"#FFFBC7\" : null}}\n            >\n              Italic\n            </button>\n          </Col>\n          <Col xs=\"3\" >\n            <button className=\"format-button\"\n                    onMouseDown={this._onUnderlineClick.bind(this)}\n                    style= {{backgroundColor: currentStyles.has('UNDERLINE') ? \"#FFFBC7\" : null}}\n            >\n              Underline\n            </button>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col xs=\"12\" onClick={() => this.editor.focus()}\n                       style={{minHeight: \"160px\", \n                               border: \"1px solid #1A163D\",\n                               backgroundColor: 'white',\n                               padding: '5px 8px',\n                               boxShadow: '3px 3px #1A163D',\n                               cursor: 'text'\n                              }}>\n            <Editor\n              className='editor-cell'\n              ref={editor => this.editor = editor}\n              placeholder=\"Type away...\"\n              editorState={this.props.editorState}\n              handleKeyCommand={this.handleKeyCommand}\n              onChange={this.props.onChange}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\n\nfunction SaveButton(props) {\n  return (\n    <button onClick={props.onClick} className='format-button'>\n      <h5>Save</h5>\n      <div className=\"fa fa-save fa-3x\"></div>\n    </button>\n  );\n}\n\nexport default SaveButton;\n\n","import React, { Component } from 'react';\nimport { Container, Col, Row, ListGroup, ListGroupItem } from 'reactstrap';\n\nclass SavedDocsList extends Component {\n\n  render() {\n    return this.props.savedDocs.map(doc => {\n      return(\n        <ListGroupItem key={doc.key}\n                       style={{borderRadius: \"0px\", border: \"1px solid #1A163D\", margin: '3px', cursor: 'pointer'}}>\n          <i onClick={() => this.props.deleteDoc(doc.key)} className=\"fa fa-trash text-secondary mr-3\"></i>\n          <span className={doc.key === this.props.currentDocKey ? \"font-weight-bold\" : null } onClick={() => this.props.loadDoc(doc)}>{doc.title}</span>\n        </ListGroupItem>\n      );\n    });\n  }\n}\n\nexport default class SavedDocs extends Component {\n\n  render() {\n    return(\n      <Container>\n        <Row>\n          <Col>\n            <h5 style={{fontVariant: 'small-caps'}} hidden={this.props.savedDocs.length === 0}>Saved</h5>\n          </Col>\n        </Row>\n        <Row>\n          <ListGroup style={{width: \"100%\"}}>\n            <SavedDocsList savedDocs={this.props.savedDocs} \n                           loadDoc={this.props.loadDoc}\n                           deleteDoc={this.props.deleteDoc}\n                           currentDocKey={this.props.currentDocKey}\n            />\n          </ListGroup>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n","import React, { Component, Fragment } from 'react';\nimport { EditorState } from 'draft-js';\nimport EditorCell from './components/EditorCellComponent';\nimport SaveButton from './components/SaveButtonComponent';\nimport SavedDocs from './components/SavedDocsComponent';\nimport { Input, Modal, ModalHeader, ModalBody, ModalFooter, Button, Container, Row, Col } from 'reactstrap';\n\nexport default class TextEditorApp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      currentTitle: 'Untitled',\n      currentDocKey: 0,\n      editorState: EditorState.createEmpty(),\n      savedDocs: [],\n      nextDocKey: 0\n    };\n    this.onChange = (editorState) => this.setState({editorState});\n\n    this.toggleModal = this.toggleModal.bind(this);\n    this.saveDoc = this.saveDoc.bind(this);\n    this.loadDoc = this.loadDoc.bind(this);\n    this.deleteDoc = this.deleteDoc.bind(this);\n  }\n\n  toggleModal() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  saveDoc() {\n    if (this.state.savedDocs.length >= 10) {\n      alert(\"Max Saved Docs: 10\")\n      this.toggleModal();\n    } else {\n      const doc = {};\n      doc.title = this.state.currentTitle;\n      doc.content = this.state.editorState.getCurrentContent();\n      doc.key = this.state.nextDocKey;\n      const savedDocs = this.state.savedDocs;\n      savedDocs.push(doc);\n      this.setState({savedDocs});\n      this.setState({currentTitle: 'Untitled'});\n      this.setState({currentDocKey: null});\n      this.setState({editorState: EditorState.createEmpty()});\n      this.setState(prevState => ({nextDocKey: prevState.nextDocKey + 1}));\n      this.toggleModal();\n    }\n  }\n\n  loadDoc(doc) {\n    this.setState({currentTitle: doc.title});\n    this.setState({currentDocKey: doc.key})\n    this.setState({editorState: EditorState.createWithContent(doc.content)});\n  }\n\n  deleteDoc(docKey) {\n    let savedDocs = this.state.savedDocs;\n    for (let i in savedDocs) {\n      if (savedDocs[i].key === docKey) {\n        savedDocs.splice(i,1);\n      }\n    }\n    this.setState({savedDocs});\n    this.setState({editorState: EditorState.createEmpty()});\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Container>\n          <Row>\n            <Col xs=\"8\">\n              <EditorCell editorState={this.state.editorState} onChange={this.onChange} />\n            </Col>\n            <Col xs=\"4\" className=\"mt-5 text-center\" style={{display: 'flex', alignItems: 'center'}}>\n              <SaveButton onClick={this.toggleModal} />\n            </Col>\n            <Col xs=\"4 mt-5\">\n              <SavedDocs savedDocs={this.state.savedDocs}\n                      \n                         loadDoc={this.loadDoc}\n                         deleteDoc={this.deleteDoc}\n                         currentDocKey={this.state.currentDocKey} \n              />\n            </Col>\n          </Row>\n        </Container>\n        <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\n          <ModalHeader className=\"text-muted\" toggle={this.toggleModal}>Title?</ModalHeader>\n          <ModalBody>\n            <Input value={this.state.currentTitle} onChange={e => {this.setState({currentTitle: e.target.value})}}/>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" outline onClick={this.saveDoc}>Save</Button>{' '}\n            <Button color=\"secondary\" outline onClick={this.toggleModal}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport TextEditorApp from './TextEditorApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TextEditorApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}